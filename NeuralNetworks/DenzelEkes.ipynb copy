{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt \n",
    "from tensorflow import keras\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten, BatchNormalization\n",
    "\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>pixel9</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "      <th>pixel784</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>43</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
       "0      2       0       0       0       0       0       0       0       0   \n",
       "1      9       0       0       0       0       0       0       0       0   \n",
       "2      6       0       0       0       0       0       0       0       5   \n",
       "3      0       0       0       0       1       2       0       0       0   \n",
       "4      3       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel9  ...  pixel775  pixel776  pixel777  pixel778  pixel779  pixel780  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0        30        43         0   \n",
       "3       0  ...         3         0         0         0         0         1   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel781  pixel782  pixel783  pixel784  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df = pd.read_csv('./fashion-mnist_train.csv')\n",
    "test_df = pd.read_csv('./fashion-mnist_test.csv')\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = np.array(train_df.iloc[:, 1:])\n",
    "test_data = np.array(test_df.iloc[:, 1:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_labels = to_categorical(train_df.iloc[:, 0])\n",
    "test_labels = to_categorical(test_df.iloc[:, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "rows, cols = 28, 28 \n",
    "\n",
    "train_data = train_data.reshape(train_data.shape[0], rows, cols, 1)\n",
    "test_data = test_data.reshape(test_data.shape[0], rows, cols, 1)\n",
    "\n",
    "train_data = train_data.astype('float32')\n",
    "test_data = test_data.astype('float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data /= 255.0\n",
    "test_data /= 255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x, val_x, train_y, val_y = train_test_split(train_data, train_labels, test_size=0.2)\n",
    "\n",
    "batch_size = 256\n",
    "epochs = 60\n",
    "input_shape = (rows, cols, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def baseline_model():\n",
    "    model = Sequential()\n",
    "    model.add(BatchNormalization(input_shape=input_shape))\n",
    "    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2,2)))\n",
    "    model.add(Dropout(0.03))\n",
    "    \n",
    "    model = Sequential()\n",
    "    model.add(BatchNormalization(input_shape=input_shape))\n",
    "    model.add(Conv2D(32, (3, 3), padding='same', activation='relu'))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2,2)))\n",
    "    model.add(Dropout(0.02))\n",
    "\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(512, activation='relu'))\n",
    "    model.add(Dropout(0.02))\n",
    "    model.add(Dense(10, activation='softmax'))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = baseline_model()\n",
    "model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='sgd')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/60\n",
      "188/188 [==============================] - 17s 89ms/step - loss: 0.9025 - accuracy: 0.7138 - val_loss: 0.7174 - val_accuracy: 0.7473\n",
      "Epoch 2/60\n",
      "188/188 [==============================] - 17s 90ms/step - loss: 0.5537 - accuracy: 0.8046 - val_loss: 0.5933 - val_accuracy: 0.7717\n",
      "Epoch 3/60\n",
      "188/188 [==============================] - 17s 91ms/step - loss: 0.4909 - accuracy: 0.8265 - val_loss: 0.5021 - val_accuracy: 0.8204\n",
      "Epoch 4/60\n",
      "188/188 [==============================] - 17s 92ms/step - loss: 0.4372 - accuracy: 0.8449 - val_loss: 0.4336 - val_accuracy: 0.8414\n",
      "Epoch 5/60\n",
      "188/188 [==============================] - 17s 92ms/step - loss: 0.4111 - accuracy: 0.8537 - val_loss: 0.3930 - val_accuracy: 0.8651\n",
      "Epoch 6/60\n",
      "188/188 [==============================] - 17s 92ms/step - loss: 0.3848 - accuracy: 0.8625 - val_loss: 0.3669 - val_accuracy: 0.8756\n",
      "Epoch 7/60\n",
      "188/188 [==============================] - 17s 92ms/step - loss: 0.3652 - accuracy: 0.8698 - val_loss: 0.3527 - val_accuracy: 0.8781\n",
      "Epoch 8/60\n",
      "188/188 [==============================] - 17s 91ms/step - loss: 0.3513 - accuracy: 0.8748 - val_loss: 0.3470 - val_accuracy: 0.8790\n",
      "Epoch 9/60\n",
      "188/188 [==============================] - 18s 96ms/step - loss: 0.3410 - accuracy: 0.8785 - val_loss: 0.3370 - val_accuracy: 0.8805\n",
      "Epoch 10/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.3285 - accuracy: 0.8827 - val_loss: 0.3320 - val_accuracy: 0.8817\n",
      "Epoch 11/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.3200 - accuracy: 0.8852 - val_loss: 0.3264 - val_accuracy: 0.8859\n",
      "Epoch 12/60\n",
      "188/188 [==============================] - 18s 95ms/step - loss: 0.3112 - accuracy: 0.8880 - val_loss: 0.3591 - val_accuracy: 0.8702\n",
      "Epoch 13/60\n",
      "188/188 [==============================] - 18s 95ms/step - loss: 0.3034 - accuracy: 0.8920 - val_loss: 0.3416 - val_accuracy: 0.8783\n",
      "Epoch 14/60\n",
      "188/188 [==============================] - 18s 96ms/step - loss: 0.2944 - accuracy: 0.8946 - val_loss: 0.3383 - val_accuracy: 0.8786\n",
      "Epoch 15/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2890 - accuracy: 0.8964 - val_loss: 0.3255 - val_accuracy: 0.8836\n",
      "Epoch 16/60\n",
      "188/188 [==============================] - 18s 97ms/step - loss: 0.2814 - accuracy: 0.9002 - val_loss: 0.2971 - val_accuracy: 0.8960\n",
      "Epoch 17/60\n",
      "188/188 [==============================] - 18s 95ms/step - loss: 0.2764 - accuracy: 0.9011 - val_loss: 0.2994 - val_accuracy: 0.8929\n",
      "Epoch 18/60\n",
      "188/188 [==============================] - 18s 96ms/step - loss: 0.2699 - accuracy: 0.9027 - val_loss: 0.2899 - val_accuracy: 0.8973\n",
      "Epoch 19/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2648 - accuracy: 0.9037 - val_loss: 0.3182 - val_accuracy: 0.8826\n",
      "Epoch 20/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2611 - accuracy: 0.9049 - val_loss: 0.2823 - val_accuracy: 0.8996\n",
      "Epoch 21/60\n",
      "188/188 [==============================] - 18s 95ms/step - loss: 0.2555 - accuracy: 0.9074 - val_loss: 0.3545 - val_accuracy: 0.8717\n",
      "Epoch 22/60\n",
      "188/188 [==============================] - 18s 96ms/step - loss: 0.2526 - accuracy: 0.9075 - val_loss: 0.2877 - val_accuracy: 0.8986\n",
      "Epoch 23/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2451 - accuracy: 0.9116 - val_loss: 0.2948 - val_accuracy: 0.8947\n",
      "Epoch 24/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2426 - accuracy: 0.9114 - val_loss: 0.3801 - val_accuracy: 0.8693\n",
      "Epoch 25/60\n",
      "188/188 [==============================] - 18s 97ms/step - loss: 0.2380 - accuracy: 0.9137 - val_loss: 0.2665 - val_accuracy: 0.9062\n",
      "Epoch 26/60\n",
      "188/188 [==============================] - 18s 95ms/step - loss: 0.2328 - accuracy: 0.9146 - val_loss: 0.2764 - val_accuracy: 0.9022\n",
      "Epoch 27/60\n",
      "188/188 [==============================] - 18s 97ms/step - loss: 0.2289 - accuracy: 0.9158 - val_loss: 0.3228 - val_accuracy: 0.8813\n",
      "Epoch 28/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.2266 - accuracy: 0.9178 - val_loss: 0.2661 - val_accuracy: 0.9063\n",
      "Epoch 29/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2204 - accuracy: 0.9203 - val_loss: 0.2675 - val_accuracy: 0.9059\n",
      "Epoch 30/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.2186 - accuracy: 0.9211 - val_loss: 0.2625 - val_accuracy: 0.9075\n",
      "Epoch 31/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.2132 - accuracy: 0.9232 - val_loss: 0.2741 - val_accuracy: 0.9024\n",
      "Epoch 32/60\n",
      "188/188 [==============================] - 18s 97ms/step - loss: 0.2120 - accuracy: 0.9229 - val_loss: 0.2674 - val_accuracy: 0.9028\n",
      "Epoch 33/60\n",
      "188/188 [==============================] - 18s 97ms/step - loss: 0.2071 - accuracy: 0.9245 - val_loss: 0.2700 - val_accuracy: 0.9070\n",
      "Epoch 34/60\n",
      "188/188 [==============================] - 21s 114ms/step - loss: 0.2025 - accuracy: 0.9262 - val_loss: 0.2811 - val_accuracy: 0.8972\n",
      "Epoch 35/60\n",
      "188/188 [==============================] - 19s 102ms/step - loss: 0.2013 - accuracy: 0.9271 - val_loss: 0.2626 - val_accuracy: 0.9054\n",
      "Epoch 36/60\n",
      "188/188 [==============================] - 39s 209ms/step - loss: 0.1983 - accuracy: 0.9275 - val_loss: 0.3485 - val_accuracy: 0.8767\n",
      "Epoch 37/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.1922 - accuracy: 0.9297 - val_loss: 0.2623 - val_accuracy: 0.9067\n",
      "Epoch 38/60\n",
      "188/188 [==============================] - 18s 95ms/step - loss: 0.1925 - accuracy: 0.9300 - val_loss: 0.2539 - val_accuracy: 0.9088\n",
      "Epoch 39/60\n",
      "188/188 [==============================] - 18s 96ms/step - loss: 0.1875 - accuracy: 0.9328 - val_loss: 0.2711 - val_accuracy: 0.9045\n",
      "Epoch 40/60\n",
      "188/188 [==============================] - 19s 98ms/step - loss: 0.1821 - accuracy: 0.9343 - val_loss: 0.2537 - val_accuracy: 0.9099\n",
      "Epoch 41/60\n",
      "188/188 [==============================] - 20s 109ms/step - loss: 0.1797 - accuracy: 0.9359 - val_loss: 0.2809 - val_accuracy: 0.9022\n",
      "Epoch 42/60\n",
      "188/188 [==============================] - 21s 109ms/step - loss: 0.1796 - accuracy: 0.9351 - val_loss: 0.2507 - val_accuracy: 0.9118\n",
      "Epoch 43/60\n",
      "188/188 [==============================] - 19s 103ms/step - loss: 0.1747 - accuracy: 0.9367 - val_loss: 0.2726 - val_accuracy: 0.9039\n",
      "Epoch 44/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.1714 - accuracy: 0.9374 - val_loss: 0.2959 - val_accuracy: 0.8951\n",
      "Epoch 45/60\n",
      "188/188 [==============================] - 19s 100ms/step - loss: 0.1698 - accuracy: 0.9388 - val_loss: 0.2440 - val_accuracy: 0.9160\n",
      "Epoch 46/60\n",
      "188/188 [==============================] - 19s 102ms/step - loss: 0.1654 - accuracy: 0.9404 - val_loss: 0.2485 - val_accuracy: 0.9136\n",
      "Epoch 47/60\n",
      "188/188 [==============================] - 19s 100ms/step - loss: 0.1616 - accuracy: 0.9419 - val_loss: 0.2563 - val_accuracy: 0.9112\n",
      "Epoch 48/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.1579 - accuracy: 0.9431 - val_loss: 0.2450 - val_accuracy: 0.9162\n",
      "Epoch 49/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.1572 - accuracy: 0.9426 - val_loss: 0.2462 - val_accuracy: 0.9155\n",
      "Epoch 50/60\n",
      "188/188 [==============================] - 19s 100ms/step - loss: 0.1545 - accuracy: 0.9446 - val_loss: 0.2447 - val_accuracy: 0.9124\n",
      "Epoch 51/60\n",
      "188/188 [==============================] - 20s 104ms/step - loss: 0.1518 - accuracy: 0.9463 - val_loss: 0.2491 - val_accuracy: 0.9140\n",
      "Epoch 52/60\n",
      "188/188 [==============================] - 19s 102ms/step - loss: 0.1462 - accuracy: 0.9479 - val_loss: 0.2643 - val_accuracy: 0.9067\n",
      "Epoch 53/60\n",
      "188/188 [==============================] - 19s 100ms/step - loss: 0.1462 - accuracy: 0.9473 - val_loss: 0.2737 - val_accuracy: 0.9074\n",
      "Epoch 54/60\n",
      "188/188 [==============================] - 19s 100ms/step - loss: 0.1432 - accuracy: 0.9493 - val_loss: 0.2552 - val_accuracy: 0.9122\n",
      "Epoch 55/60\n",
      "188/188 [==============================] - 19s 99ms/step - loss: 0.1393 - accuracy: 0.9511 - val_loss: 0.2599 - val_accuracy: 0.9133\n",
      "Epoch 56/60\n",
      "188/188 [==============================] - 19s 102ms/step - loss: 0.1372 - accuracy: 0.9512 - val_loss: 0.2722 - val_accuracy: 0.9030\n",
      "Epoch 57/60\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "188/188 [==============================] - 19s 100ms/step - loss: 0.1349 - accuracy: 0.9516 - val_loss: 0.2598 - val_accuracy: 0.9111\n",
      "Epoch 58/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.1371 - accuracy: 0.9511 - val_loss: 0.2620 - val_accuracy: 0.9130\n",
      "Epoch 59/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.1270 - accuracy: 0.9551 - val_loss: 0.2461 - val_accuracy: 0.9140\n",
      "Epoch 60/60\n",
      "188/188 [==============================] - 18s 98ms/step - loss: 0.1262 - accuracy: 0.9559 - val_loss: 0.2540 - val_accuracy: 0.9157\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(train_x, train_y,\n",
    "          batch_size=batch_size,\n",
    "          epochs=epochs,\n",
    "          verbose=1,\n",
    "          validation_data=(val_x, val_y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
